{"version":3,"file":"datastar.js","sources":["../src/lib/dom.ts","../src/lib/external/preact-core.ts","../src/lib/external/deepsignal.ts","../src/lib/external/ts-merge-patch.ts","../src/lib/plugins/core.ts","../src/lib/core.ts","../src/lib/plugins/attributes.ts","../src/lib/external/idiomorph.ts","../src/lib/plugins/backend.ts","../src/lib/plugins/visibility.ts","../src/lib/index.ts"],"sourcesContent":["import { HTMLorSVGElement } from './types'\n\nexport function toHTMLorSVGElement(node: Node): HTMLorSVGElement | null {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return null\n  }\n  return node\n}\n","function cycleDetected(): never {\n  throw new Error('Cycle detected')\n}\nfunction mutationDetected(): never {\n  throw new Error('Computed cannot have side-effects')\n}\n\nconst identifier = Symbol.for('preact-signals')\n\n// Flags for Computed and Effect.\nconst RUNNING = 1 << 0\nconst NOTIFIED = 1 << 1\nconst OUTDATED = 1 << 2\nconst DISPOSED = 1 << 3\nconst HAS_ERROR = 1 << 4\nconst TRACKING = 1 << 5\n\n// A linked list node used to track dependencies (sources) and dependents (targets).\n// Also used to remember the source's last version number that the target saw.\ntype Node = {\n  // A source whose value the target depends on.\n  _source: Signal\n  _prevSource?: Node\n  _nextSource?: Node\n\n  // A target that depends on the source and should be notified when the source changes.\n  _target: Computed | Effect\n  _prevTarget?: Node\n  _nextTarget?: Node\n\n  // The version number of the source that target has last seen. We use version numbers\n  // instead of storing the source value, because source values can take arbitrary amount\n  // of memory, and computeds could hang on to them forever because they're lazily evaluated.\n  // Use the special value -1 to mark potentially unused but recyclable nodes.\n  _version: number\n\n  // Used to remember & roll back the source's previous `._node` value when entering &\n  // exiting a new evaluation context.\n  _rollbackNode?: Node\n}\n\nfunction startBatch() {\n  batchDepth++\n}\n\nfunction endBatch() {\n  if (batchDepth > 1) {\n    batchDepth--\n    return\n  }\n\n  let error: unknown\n  let hasError = false\n\n  while (batchedEffect !== undefined) {\n    let effect: Effect | undefined = batchedEffect\n    batchedEffect = undefined\n\n    batchIteration++\n\n    while (effect !== undefined) {\n      const next: Effect | undefined = effect._nextBatchedEffect\n      effect._nextBatchedEffect = undefined\n      effect._flags &= ~NOTIFIED\n\n      if (!(effect._flags & DISPOSED) && needsToRecompute(effect)) {\n        try {\n          effect._callback()\n        } catch (err) {\n          if (!hasError) {\n            error = err\n            hasError = true\n          }\n        }\n      }\n      effect = next\n    }\n  }\n  batchIteration = 0\n  batchDepth--\n\n  if (hasError) {\n    throw error\n  }\n}\n\nfunction batch<T>(callback: () => T): T {\n  if (batchDepth > 0) {\n    return callback()\n  }\n  /*@__INLINE__**/ startBatch()\n  try {\n    return callback()\n  } finally {\n    endBatch()\n  }\n}\n\n// Currently evaluated computed or effect.\nlet evalContext: Computed | Effect | undefined = undefined\n\nlet untrackedDepth = 0\n\nfunction untracked<T>(callback: () => T): T {\n  if (untrackedDepth > 0) {\n    return callback()\n  }\n  const prevContext = evalContext\n  evalContext = undefined\n  untrackedDepth++\n  try {\n    return callback()\n  } finally {\n    untrackedDepth--\n    evalContext = prevContext\n  }\n}\n\n// Effects collected into a batch.\nlet batchedEffect: Effect | undefined = undefined\nlet batchDepth = 0\nlet batchIteration = 0\n\n// A global version number for signals, used for fast-pathing repeated\n// computed.peek()/computed.value calls when nothing has changed globally.\nlet globalVersion = 0\n\nfunction addDependency(signal: Signal): Node | undefined {\n  if (evalContext === undefined) {\n    return undefined\n  }\n\n  let node = signal._node\n  if (node === undefined || node._target !== evalContext) {\n    /**\n     * `signal` is a new dependency. Create a new dependency node, and set it\n     * as the tail of the current context's dependency list. e.g:\n     *\n     * { A <-> B       }\n     *         ↑     ↑\n     *        tail  node (new)\n     *               ↓\n     * { A <-> B <-> C }\n     *               ↑\n     *              tail (evalContext._sources)\n     */\n    node = {\n      _version: 0,\n      _source: signal,\n      _prevSource: evalContext._sources,\n      _nextSource: undefined,\n      _target: evalContext,\n      _prevTarget: undefined,\n      _nextTarget: undefined,\n      _rollbackNode: node,\n    }\n\n    if (evalContext._sources !== undefined) {\n      evalContext._sources._nextSource = node\n    }\n    evalContext._sources = node\n    signal._node = node\n\n    // Subscribe to change notifications from this dependency if we're in an effect\n    // OR evaluating a computed signal that in turn has subscribers.\n    if (evalContext._flags & TRACKING) {\n      signal._subscribe(node)\n    }\n    return node\n  } else if (node._version === -1) {\n    // `signal` is an existing dependency from a previous evaluation. Reuse it.\n    node._version = 0\n\n    /**\n     * If `node` is not already the current tail of the dependency list (i.e.\n     * there is a next node in the list), then make the `node` the new tail. e.g:\n     *\n     * { A <-> B <-> C <-> D }\n     *         ↑           ↑\n     *        node   ┌─── tail (evalContext._sources)\n     *         └─────│─────┐\n     *               ↓     ↓\n     * { A <-> C <-> D <-> B }\n     *                     ↑\n     *                    tail (evalContext._sources)\n     */\n    if (node._nextSource !== undefined) {\n      node._nextSource._prevSource = node._prevSource\n\n      if (node._prevSource !== undefined) {\n        node._prevSource._nextSource = node._nextSource\n      }\n\n      node._prevSource = evalContext._sources\n      node._nextSource = undefined\n\n      evalContext._sources!._nextSource = node\n      evalContext._sources = node\n    }\n\n    // We can assume that the currently evaluated effect / computed signal is already\n    // subscribed to change notifications from `signal` if needed.\n    return node\n  }\n  return undefined\n}\n\n// @ts-ignore internal Signal is viewed as a function\ndeclare class Signal<T = any> {\n  /** @internal */\n  _value: unknown\n\n  /**\n   * @internal\n   * Version numbers should always be >= 0, because the special value -1 is used\n   * by Nodes to signify potentially unused but recyclable nodes.\n   */\n  _version: number\n\n  /** @internal */\n  _node?: Node\n\n  /** @internal */\n  _targets?: Node\n\n  constructor(value?: T)\n\n  /** @internal */\n  _refresh(): boolean\n\n  /** @internal */\n  _subscribe(node: Node): void\n\n  /** @internal */\n  _unsubscribe(node: Node): void\n\n  subscribe(fn: (value: T) => void): () => void\n\n  valueOf(): T\n\n  toString(): string\n\n  toJSON(): T\n\n  peek(): T\n\n  brand: typeof identifier\n\n  get value(): T\n  set value(value: T)\n}\n\n/** @internal */\n// @ts-ignore internal Signal is viewed as function\nfunction Signal(this: Signal, value?: unknown) {\n  this._value = value\n  this._version = 0\n  this._node = undefined\n  this._targets = undefined\n}\n\nSignal.prototype.brand = identifier\n\nSignal.prototype._refresh = function () {\n  return true\n}\n\nSignal.prototype._subscribe = function (node) {\n  if (this._targets !== node && node._prevTarget === undefined) {\n    node._nextTarget = this._targets\n    if (this._targets !== undefined) {\n      this._targets._prevTarget = node\n    }\n    this._targets = node\n  }\n}\n\nSignal.prototype._unsubscribe = function (node) {\n  // Only run the unsubscribe step if the signal has any subscribers to begin with.\n  if (this._targets !== undefined) {\n    const prev = node._prevTarget\n    const next = node._nextTarget\n    if (prev !== undefined) {\n      prev._nextTarget = next\n      node._prevTarget = undefined\n    }\n    if (next !== undefined) {\n      next._prevTarget = prev\n      node._nextTarget = undefined\n    }\n    if (node === this._targets) {\n      this._targets = next\n    }\n  }\n}\n\nSignal.prototype.subscribe = function (fn) {\n  const signal = this\n  return effect(function (this: Effect) {\n    const value = signal.value\n    const flag = this._flags & TRACKING\n    this._flags &= ~TRACKING\n    try {\n      fn(value)\n    } finally {\n      this._flags |= flag\n    }\n  })\n}\n\nSignal.prototype.valueOf = function () {\n  return this.value\n}\n\nSignal.prototype.toString = function () {\n  return this.value + ''\n}\n\nSignal.prototype.toJSON = function () {\n  return this.value\n}\n\nSignal.prototype.peek = function () {\n  return this._value\n}\n\nObject.defineProperty(Signal.prototype, 'value', {\n  get() {\n    const node = addDependency(this)\n    if (node !== undefined) {\n      node._version = this._version\n    }\n    return this._value\n  },\n  set(this: Signal, value) {\n    if (evalContext instanceof Computed) {\n      mutationDetected()\n    }\n\n    if (value !== this._value) {\n      if (batchIteration > 100) {\n        cycleDetected()\n      }\n\n      this._value = value\n      this._version++\n      globalVersion++\n\n      /**@__INLINE__*/ startBatch()\n      try {\n        for (let node = this._targets; node !== undefined; node = node._nextTarget) {\n          node._target._notify()\n        }\n      } finally {\n        endBatch()\n      }\n    }\n  },\n})\n\nfunction signal<T>(value: T): Signal<T> {\n  return new Signal(value)\n}\n\nfunction needsToRecompute(target: Computed | Effect): boolean {\n  // Check the dependencies for changed values. The dependency list is already\n  // in order of use. Therefore if multiple dependencies have changed values, only\n  // the first used dependency is re-evaluated at this point.\n  for (let node = target._sources; node !== undefined; node = node._nextSource) {\n    // If there's a new version of the dependency before or after refreshing,\n    // or the dependency has something blocking it from refreshing at all (e.g. a\n    // dependency cycle), then we need to recompute.\n    if (\n      node._source._version !== node._version ||\n      !node._source._refresh() ||\n      node._source._version !== node._version\n    ) {\n      return true\n    }\n  }\n  // If none of the dependencies have changed values since last recompute then\n  // there's no need to recompute.\n  return false\n}\n\nfunction prepareSources(target: Computed | Effect) {\n  /**\n   * 1. Mark all current sources as re-usable nodes (version: -1)\n   * 2. Set a rollback node if the current node is being used in a different context\n   * 3. Point 'target._sources' to the tail of the doubly-linked list, e.g:\n   *\n   *    { undefined <- A <-> B <-> C -> undefined }\n   *                   ↑           ↑\n   *                   │           └──────┐\n   * target._sources = A; (node is head)  │\n   *                   ↓                  │\n   * target._sources = C; (node is tail) ─┘\n   */\n  for (let node = target._sources; node !== undefined; node = node._nextSource) {\n    const rollbackNode = node._source._node\n    if (rollbackNode !== undefined) {\n      node._rollbackNode = rollbackNode\n    }\n    node._source._node = node\n    node._version = -1\n\n    if (node._nextSource === undefined) {\n      target._sources = node\n      break\n    }\n  }\n}\n\nfunction cleanupSources(target: Computed | Effect) {\n  let node = target._sources\n  let head = undefined\n\n  /**\n   * At this point 'target._sources' points to the tail of the doubly-linked list.\n   * It contains all existing sources + new sources in order of use.\n   * Iterate backwards until we find the head node while dropping old dependencies.\n   */\n  while (node !== undefined) {\n    const prev = node._prevSource\n\n    /**\n     * The node was not re-used, unsubscribe from its change notifications and remove itself\n     * from the doubly-linked list. e.g:\n     *\n     * { A <-> B <-> C }\n     *         ↓\n     *    { A <-> C }\n     */\n    if (node._version === -1) {\n      node._source._unsubscribe(node)\n\n      if (prev !== undefined) {\n        prev._nextSource = node._nextSource\n      }\n      if (node._nextSource !== undefined) {\n        node._nextSource._prevSource = prev\n      }\n    } else {\n      /**\n       * The new head is the last node seen which wasn't removed/unsubscribed\n       * from the doubly-linked list. e.g:\n       *\n       * { A <-> B <-> C }\n       *   ↑     ↑     ↑\n       *   │     │     └ head = node\n       *   │     └ head = node\n       *   └ head = node\n       */\n      head = node\n    }\n\n    node._source._node = node._rollbackNode\n    if (node._rollbackNode !== undefined) {\n      node._rollbackNode = undefined\n    }\n\n    node = prev\n  }\n\n  target._sources = head\n}\n\ndeclare class Computed<T = any> extends Signal<T> {\n  _compute: () => T\n  _sources?: Node\n  _globalVersion: number\n  _flags: number\n\n  constructor(compute: () => T)\n\n  _notify(): void\n  get value(): T\n}\n\nfunction Computed(this: Computed, compute: () => unknown) {\n  Signal.call(this, undefined)\n\n  this._compute = compute\n  this._sources = undefined\n  this._globalVersion = globalVersion - 1\n  this._flags = OUTDATED\n}\n\nComputed.prototype = new Signal() as Computed\n\nComputed.prototype._refresh = function () {\n  this._flags &= ~NOTIFIED\n\n  if (this._flags & RUNNING) {\n    return false\n  }\n\n  // If this computed signal has subscribed to updates from its dependencies\n  // (TRACKING flag set) and none of them have notified about changes (OUTDATED\n  // flag not set), then the computed value can't have changed.\n  if ((this._flags & (OUTDATED | TRACKING)) === TRACKING) {\n    return true\n  }\n  this._flags &= ~OUTDATED\n\n  if (this._globalVersion === globalVersion) {\n    return true\n  }\n  this._globalVersion = globalVersion\n\n  // Mark this computed signal running before checking the dependencies for value\n  // changes, so that the RUNNING flag can be used to notice cyclical dependencies.\n  this._flags |= RUNNING\n  if (this._version > 0 && !needsToRecompute(this)) {\n    this._flags &= ~RUNNING\n    return true\n  }\n\n  const prevContext = evalContext\n  try {\n    prepareSources(this)\n    evalContext = this\n    const value = this._compute()\n    if (this._flags & HAS_ERROR || this._value !== value || this._version === 0) {\n      this._value = value\n      this._flags &= ~HAS_ERROR\n      this._version++\n    }\n  } catch (err) {\n    this._value = err\n    this._flags |= HAS_ERROR\n    this._version++\n  }\n  evalContext = prevContext\n  cleanupSources(this)\n  this._flags &= ~RUNNING\n  return true\n}\n\nComputed.prototype._subscribe = function (node) {\n  if (this._targets === undefined) {\n    this._flags |= OUTDATED | TRACKING\n\n    // A computed signal subscribes lazily to its dependencies when the it\n    // gets its first subscriber.\n    for (let node = this._sources; node !== undefined; node = node._nextSource) {\n      node._source._subscribe(node)\n    }\n  }\n  Signal.prototype._subscribe.call(this, node)\n}\n\nComputed.prototype._unsubscribe = function (node) {\n  // Only run the unsubscribe step if the computed signal has any subscribers.\n  if (this._targets !== undefined) {\n    Signal.prototype._unsubscribe.call(this, node)\n\n    // Computed signal unsubscribes from its dependencies when it loses its last subscriber.\n    // This makes it possible for unreferences subgraphs of computed signals to get garbage collected.\n    if (this._targets === undefined) {\n      this._flags &= ~TRACKING\n\n      for (let node = this._sources; node !== undefined; node = node._nextSource) {\n        node._source._unsubscribe(node)\n      }\n    }\n  }\n}\n\nComputed.prototype._notify = function () {\n  if (!(this._flags & NOTIFIED)) {\n    this._flags |= OUTDATED | NOTIFIED\n\n    for (let node = this._targets; node !== undefined; node = node._nextTarget) {\n      node._target._notify()\n    }\n  }\n}\n\nComputed.prototype.peek = function () {\n  if (!this._refresh()) {\n    cycleDetected()\n  }\n  if (this._flags & HAS_ERROR) {\n    throw this._value\n  }\n  return this._value\n}\n\nObject.defineProperty(Computed.prototype, 'value', {\n  get() {\n    if (this._flags & RUNNING) {\n      cycleDetected()\n    }\n    const node = addDependency(this)\n    this._refresh()\n    if (node !== undefined) {\n      node._version = this._version\n    }\n    if (this._flags & HAS_ERROR) {\n      throw this._value\n    }\n    return this._value\n  },\n})\n\ninterface ReadonlySignal<T = any> extends Signal<T> {\n  readonly value: T\n}\n\nfunction computed<T>(compute: () => T): ReadonlySignal<T> {\n  return new Computed(compute)\n}\n\nfunction cleanupEffect(effect: Effect) {\n  const cleanup = effect._cleanup\n  effect._cleanup = undefined\n\n  if (typeof cleanup === 'function') {\n    /*@__INLINE__**/ startBatch()\n\n    // Run cleanup functions always outside of any context.\n    const prevContext = evalContext\n    evalContext = undefined\n    try {\n      cleanup()\n    } catch (err) {\n      effect._flags &= ~RUNNING\n      effect._flags |= DISPOSED\n      disposeEffect(effect)\n      throw err\n    } finally {\n      evalContext = prevContext\n      endBatch()\n    }\n  }\n}\n\nfunction disposeEffect(effect: Effect) {\n  for (let node = effect._sources; node !== undefined; node = node._nextSource) {\n    node._source._unsubscribe(node)\n  }\n  effect._compute = undefined\n  effect._sources = undefined\n\n  cleanupEffect(effect)\n}\n\nfunction endEffect(this: Effect, prevContext?: Computed | Effect) {\n  if (evalContext !== this) {\n    throw new Error('Out-of-order effect')\n  }\n  cleanupSources(this)\n  evalContext = prevContext\n\n  this._flags &= ~RUNNING\n  if (this._flags & DISPOSED) {\n    disposeEffect(this)\n  }\n  endBatch()\n}\n\ntype EffectCleanup = () => unknown\ndeclare class Effect {\n  _compute?: () => unknown | EffectCleanup\n  _cleanup?: () => unknown\n  _sources?: Node\n  _nextBatchedEffect?: Effect\n  _flags: number\n\n  constructor(compute: () => unknown | EffectCleanup)\n\n  _callback(): void\n  _start(): () => void\n  _notify(): void\n  _dispose(): void\n}\n\nfunction Effect(this: Effect, compute: () => unknown | EffectCleanup) {\n  this._compute = compute\n  this._cleanup = undefined\n  this._sources = undefined\n  this._nextBatchedEffect = undefined\n  this._flags = TRACKING\n}\n\nEffect.prototype._callback = function () {\n  const finish = this._start()\n  try {\n    if (this._flags & DISPOSED) return\n    if (this._compute === undefined) return\n\n    const cleanup = this._compute()\n    if (typeof cleanup === 'function') {\n      this._cleanup = cleanup as EffectCleanup\n    }\n  } finally {\n    finish()\n  }\n}\n\nEffect.prototype._start = function () {\n  if (this._flags & RUNNING) {\n    cycleDetected()\n  }\n  this._flags |= RUNNING\n  this._flags &= ~DISPOSED\n  cleanupEffect(this)\n  prepareSources(this)\n\n  /*@__INLINE__**/ startBatch()\n  const prevContext = evalContext\n  evalContext = this\n  return endEffect.bind(this, prevContext)\n}\n\nEffect.prototype._notify = function () {\n  if (!(this._flags & NOTIFIED)) {\n    this._flags |= NOTIFIED\n    this._nextBatchedEffect = batchedEffect\n    batchedEffect = this\n  }\n}\n\nEffect.prototype._dispose = function () {\n  this._flags |= DISPOSED\n\n  if (!(this._flags & RUNNING)) {\n    disposeEffect(this)\n  }\n}\n\nfunction effect(compute: () => unknown | EffectCleanup): () => void {\n  const effect = new Effect(compute)\n  try {\n    effect._callback()\n  } catch (err) {\n    effect._dispose()\n    throw err\n  }\n  // Return a bound function instead of a wrapper like `() => effect._dispose()`,\n  // because bound functions seem to be just as fast and take up a lot less memory.\n  return effect._dispose.bind(effect)\n}\n\nexport { Signal, batch, computed, effect, signal, untracked, type ReadonlySignal }\n","import { Signal, batch, signal } from './preact-core'\n\nexport type AtomicState =\n  | Array<unknown>\n  | ((...args: unknown[]) => unknown)\n  | string\n  | boolean\n  | number\n  | bigint\n  | symbol\n  | undefined\n  | null\n\nexport type DeepState = {\n  [key: string]: (() => unknown) | AtomicState | DeepState\n}\n\nexport type ReadOnlyDeep<T> = {\n  readonly [P in keyof T]: ReadOnlyDeep<T[P]>\n}\n\nexport interface DeepSignalAccessors<T extends DeepState> {\n  value: ReadOnlyDeep<T>\n  peek: () => ReadOnlyDeep<T>\n}\n\nexport type DeepSignalType<T extends DeepState> = DeepSignalAccessors<T> & {\n  [K in keyof T]: T[K] extends AtomicState ? Signal<T[K]> : T[K] extends DeepState ? DeepSignalType<T[K]> : Signal<T[K]>\n}\n\nexport class DeepSignal<T extends DeepState> implements DeepSignalAccessors<T> {\n  get value(): ReadOnlyDeep<T> {\n    return getValue(this as DeepSignalType<T>)\n  }\n\n  set value(payload: ReadOnlyDeep<T>) {\n    batch(() => setValue(this as DeepSignalType<T>, payload))\n  }\n\n  peek(): ReadOnlyDeep<T> {\n    return getValue(this as DeepSignalType<T>, { peek: true })\n  }\n}\n\nexport const deepSignal = <T extends DeepState>(initialValue: T): DeepSignalType<T> =>\n  Object.assign(\n    new DeepSignal(),\n    Object.entries(initialValue).reduce(\n      (acc, [key, value]) => {\n        if (['value', 'peek'].some((iKey) => iKey === key)) {\n          throw new Error(`${key} is a reserved property name`)\n        } else if (typeof value !== 'object' || value === null || Array.isArray(value)) {\n          acc[key] = signal(value)\n        } else {\n          acc[key] = deepSignal(value)\n        }\n        return acc\n      },\n      {} as { [key: string]: unknown },\n    ),\n  ) as DeepSignalType<T>\n\nconst setValue = <U extends DeepState, T extends DeepSignalType<U>>(deepSignal: T, payload: U): void =>\n  Object.keys(payload).forEach((key: keyof U) => (deepSignal[key].value = payload[key]))\n\nconst getValue = <U extends DeepState, T extends DeepSignalType<U>>(\n  deepSignal: T,\n  { peek = false }: { peek?: boolean } = {},\n): ReadOnlyDeep<U> =>\n  Object.entries(deepSignal).reduce(\n    (acc, [key, value]) => {\n      if (value instanceof Signal) {\n        acc[key] = peek ? value.peek() : value.value\n      } else if (value instanceof DeepSignal) {\n        acc[key] = getValue(value as DeepSignalType<DeepState>, { peek })\n      }\n      return acc\n    },\n    {} as { [key: string]: unknown },\n  ) as ReadOnlyDeep<U>\n","type mpObj<T> = { [k in keyof T | string | number | symbol]: any }\nexport function apply<L, R>(target: mpObj<L>, patchItem: mpObj<R>): Partial<L> & Partial<R>\nexport function apply<L, R>(target: mpObj<L>, patchItem: mpObj<R>): R\nexport function apply<L, R>(target: mpObj<L>, patchItem: mpObj<R>): {}\nexport function apply<L, R>(target: mpObj<L>, patchItem: null): null\nexport function apply<L, R>(target: mpObj<L>, patchItem: string): string\nexport function apply<L, R>(target: mpObj<L>, patchItem: number): number\nexport function apply<L, R>(target: mpObj<L>, patchItem: undefined): undefined\nexport function apply<L, R>(target: mpObj<L>, patchItem: R[]): R[]\n\nexport function apply(target: any, patchItem: any): any {\n  /**\n   * If the patch is anything other than an object,\n   * the result will always be to replace\n   * the entire target with the entire patch.\n   */\n  if (typeof patchItem !== 'object' || Array.isArray(patchItem) || !patchItem) {\n    return JSON.parse(JSON.stringify(patchItem)) //return new instance of variable\n  }\n\n  if (typeof patchItem === 'object' && patchItem.toJSON !== undefined && typeof patchItem.toJSON === 'function') {\n    return patchItem.toJSON()\n  }\n  /** Also, it is not possible to\n   * patch part of a target that is not an object,\n   * such as to replace just some of the values in an array.\n   */\n  let targetResult = target\n  if (typeof target !== 'object') {\n    //Target is empty/not an object, so basically becomes patch, minus any null valued sections (becomes {} + patch)\n    targetResult = { ...patchItem }\n  }\n\n  Object.keys(patchItem).forEach((k) => {\n    if (!targetResult.hasOwnProperty(k)) targetResult[k] = patchItem[k] //This ensure the key exists and TS can't throw a wobbly over an undefined key\n    if (patchItem[k] === null) {\n      delete targetResult[k]\n    } else {\n      targetResult[k] = apply(targetResult[k], patchItem[k])\n    }\n  })\n  return targetResult\n}\n","import { AttributeContext, AttributePlugin, Preprocesser, RegexpGroups } from '../types'\n\nconst SignalProcessor: Preprocesser = {\n  name: 'SignalProcessor',\n  description: `Replacing $signal with ctx.store.signal.value`,\n  regexp: new RegExp(/(?<whole>\\$(?<signal>[a-zA-Z_$][0-9a-zA-Z_$]*))/g),\n  replacer: (groups: RegexpGroups) => {\n    const { signal } = groups\n    return `ctx.store.${signal}.value`\n  },\n}\n\nconst ActionProcessor: Preprocesser = {\n  name: 'ActionProcessor',\n  description: `Replacing @action(args) with ctx.actions.action(ctx, args)`,\n  regexp: new RegExp(/(?<whole>@(?<action>[a-zA-Z_$][0-9a-zA-Z_$]*)(?<call>\\((?<args>.*)\\))?)/g),\n  replacer: ({ action, args }: RegexpGroups) => {\n    return `ctx.actions.${action}(ctx, ${args || ''})`\n  },\n}\n\nconst RefProcessor: Preprocesser = {\n  name: 'RefProcessor',\n  description: `Replacing #foo with ctx.refs.foo`,\n  regexp: new RegExp(/(?<whole>\\#(?<ref>[a-zA-Z_$][0-9a-zA-Z_$]*))/g),\n  replacer({ ref }: RegexpGroups) {\n    return `data.refs.${ref}`\n  },\n}\n\nexport const CorePreprocessors: Preprocesser[] = [SignalProcessor, ActionProcessor, RefProcessor]\n\nconst BodyStoreAttributePlugin: AttributePlugin = {\n  prefix: 'store',\n  description: 'Setup the global store',\n  allowedTags: new Set(['body']),\n\n  onLoad: (ctx: AttributeContext) => {\n    const bodyStore = ctx.expressionFn(ctx)\n    ctx.mergeStore(bodyStore)\n  },\n}\n\nconst RefPlugin: AttributePlugin = {\n  prefix: 'ref',\n  description: 'Sets the value of the element',\n  mustHaveEmptyKey: true,\n  mustNotEmptyExpression: true,\n  bypassExpressionFunctionCreation: true,\n  preprocessers: new Set([]),\n\n  onLoad: (ctx: AttributeContext) => {\n    const { el, expression } = ctx\n    ctx.refs[expression] = el\n    return () => delete ctx.refs[expression]\n  },\n}\n\nexport const CorePlugins: AttributePlugin[] = [BodyStoreAttributePlugin, RefPlugin]\n","import { toHTMLorSVGElement } from './dom'\nimport { DeepSignal, DeepState, deepSignal } from './external/deepsignal'\nimport { computed, effect, signal } from './external/preact-core'\nimport { apply } from './external/ts-merge-patch'\nimport { CorePlugins, CorePreprocessors } from './plugins/core'\nimport {\n  Actions,\n  AttributeContext,\n  AttributePlugin,\n  ExpressionFunction,\n  OnRemovalFn,\n  Preprocesser,\n  Reactivity,\n} from './types'\n\nexport class Datastar {\n  plugins: AttributePlugin[] = []\n  store: DeepSignal<any> = deepSignal({})\n  actions: Actions = {}\n  refs: Record<string, HTMLElement> = {}\n  reactivity: Reactivity = {\n    signal,\n    computed,\n    effect,\n  }\n  missingIDNext = 0\n  removals = new Map<Element, Set<OnRemovalFn>>()\n\n  constructor(actions: Actions = {}, ...plugins: AttributePlugin[]) {\n    this.actions = Object.assign(this.actions, actions)\n    plugins = [...CorePlugins, ...plugins]\n    if (!plugins.length) throw new Error('No plugins provided')\n\n    const allPluginPrefixes = new Set<string>()\n    for (const p of plugins) {\n      if (p.requiredPluginPrefixes) {\n        for (const requiredPluginType of p.requiredPluginPrefixes) {\n          if (!allPluginPrefixes.has(requiredPluginType)) {\n            throw new Error(`Plugin ${p.prefix} requires plugin ${requiredPluginType}`)\n          }\n        }\n      }\n\n      this.plugins.push(p)\n      allPluginPrefixes.add(p.prefix)\n    }\n  }\n\n  run() {\n    this.plugins.forEach((p) => {\n      if (p.onGlobalInit) {\n        p.onGlobalInit({\n          actions: this.actions,\n          refs: this.refs,\n          reactivity: this.reactivity,\n          mergeStore: this.mergeStore.bind(this),\n          store: this.store,\n        })\n      }\n    })\n    this.applyPlugins(document.body)\n  }\n\n  private cleanupElementRemovals(element: Element) {\n    const removalSet = this.removals.get(element)\n    if (removalSet) {\n      for (const removal of removalSet) {\n        removal()\n      }\n      this.removals.delete(element)\n    }\n  }\n\n  private mergeStore(store: DeepState) {\n    const revisedStore = apply(this.store.value, store) as DeepState\n    this.store = deepSignal(revisedStore)\n  }\n\n  applyPlugins(rootElement: Element) {\n    const appliedProcessors = new Set<Preprocesser>()\n\n    walkDownDOM(rootElement, (element) => {\n      this.cleanupElementRemovals(element)\n\n      const el = toHTMLorSVGElement(element)\n      if (!el) return\n\n      if (el.id) {\n        // TODO: Remove this hack once CSSStyleDeclaration supports viewTransitionName\n        const styl = el.style as any\n        styl.viewTransitionName = el.id\n        console.log(`Setting viewTransitionName on ${el.id}`)\n      }\n      if (!el.id && el.tagName !== 'BODY') {\n        const id = (this.missingIDNext++).toString(16).padStart(8, '0')\n        el.id = `ds${id}`\n      }\n\n      this.plugins.forEach((p) => {\n        for (const dsKey in el.dataset) {\n          let expression = el.dataset[dsKey] || ''\n\n          if (!dsKey.startsWith(p.prefix)) continue\n\n          appliedProcessors.clear()\n          console.info(`Found ${dsKey} on ${el.id ? `#${el.id}` : el.tagName}, applying Datastar plugin '${p.prefix}'`)\n\n          if (p.allowedTags && !p.allowedTags.has(el.tagName.toLowerCase())) {\n            throw new Error(\n              `Tag '${el.tagName}' is not allowed for plugin '${dsKey}', allowed tags are: ${[\n                [...p.allowedTags].map((t) => `'${t}'`),\n              ].join(', ')}`,\n            )\n          }\n\n          let keyRaw = dsKey.slice(p.prefix.length)\n          let [key, ...modifiersWithArgsArr] = keyRaw.split('.')\n          if (p.mustHaveEmptyKey && key.length > 0) {\n            throw new Error(`Attribute '${dsKey}' must have empty key`)\n          }\n          if (p.mustNotEmptyKey && key.length === 0) {\n            throw new Error(`Attribute '${dsKey}' must have non-empty key`)\n          }\n          if (key.length) {\n            key = key[0].toLowerCase() + key.slice(1)\n          }\n\n          const modifiersArr = modifiersWithArgsArr.map((m) => {\n            const [label, ...args] = m.split('_')\n            return { label, args }\n          })\n          if (p.allowedModifiers) {\n            for (const modifier of modifiersArr) {\n              if (!p.allowedModifiers.has(modifier.label)) {\n                throw new Error(`Modifier '${modifier.label}' is not allowed`)\n              }\n            }\n          }\n          const modifiers = new Map<string, string[]>()\n          for (const modifier of modifiersArr) {\n            modifiers.set(modifier.label, modifier.args)\n          }\n\n          if (p.mustHaveEmptyExpression && expression.length) {\n            throw new Error(`Attribute '${dsKey}' must have empty expression`)\n          }\n          if (p.mustNotEmptyExpression && !expression.length) {\n            throw new Error(`Attribute '${dsKey}' must have non-empty expression`)\n          }\n\n          const processors = [...CorePreprocessors, ...(p.preprocessers || [])]\n          for (const processor of processors) {\n            if (appliedProcessors.has(processor)) continue\n            appliedProcessors.add(processor)\n            const matches = [...expression.matchAll(processor.regexp)]\n            if (matches.length) {\n              for (const match of matches) {\n                if (!match.groups) continue\n                const { groups } = match\n                const { whole } = groups\n                expression = expression.replace(whole, processor.replacer(groups))\n              }\n            }\n          }\n\n          const { store, reactivity, actions, refs } = this\n          const ctx: AttributeContext = {\n            store,\n            mergeStore: this.mergeStore.bind(this),\n            applyPlugins: this.applyPlugins.bind(this),\n            actions,\n            refs,\n            reactivity,\n            el,\n            key,\n            expression,\n            expressionFn: () => {\n              throw new Error('Expression function not created')\n            },\n            modifiers,\n          }\n\n          if (!p.bypassExpressionFunctionCreation && !p.mustHaveEmptyExpression && expression.length) {\n            const fnContent = `return ${expression}`\n            try {\n              const fn = new Function('ctx', fnContent) as ExpressionFunction\n              ctx.expressionFn = fn\n            } catch (e) {\n              console.error(`Error evaluating expression '${fnContent}' on ${el.id ? `#${el.id}` : el.tagName}`)\n              return\n            }\n          }\n\n          const removal = p.onLoad(ctx)\n          if (removal) {\n            if (!this.removals.has(el)) {\n              this.removals.set(el, new Set())\n            }\n            this.removals.get(el)!.add(removal)\n          }\n        }\n      })\n    })\n  }\n}\n\nfunction walkDownDOM(el: Element | null, callback: (el: Element) => void) {\n  if (!el) return\n  callback(el)\n\n  el = el.firstElementChild\n\n  while (el) {\n    walkDownDOM(el, callback)\n    el = el.nextElementSibling\n  }\n}\n","import { Signal } from '../external/preact-core'\nimport { AttributeContext, AttributePlugin } from '../types'\n\nconst kebabize = (str: string) => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase())\n\nexport const BindAttributePlugin: AttributePlugin = {\n  prefix: 'bind',\n  description: 'Sets the value of the element',\n  mustNotEmptyKey: true,\n  mustNotEmptyExpression: true,\n\n  onLoad: (ctx: AttributeContext) => {\n    return ctx.reactivity.effect(() => {\n      const key = kebabize(ctx.key)\n      const value = ctx.expressionFn(ctx)\n      ctx.el.setAttribute(key, `${value}`)\n    })\n  },\n}\n\nconst updateModelEvents = ['change', 'input', 'keydown']\nexport const TwoWayBindingModelPlugin: AttributePlugin = {\n  prefix: 'model',\n  description: 'Sets the value of the element',\n  mustHaveEmptyKey: true,\n  allowedTags: new Set(['input', 'textarea', 'select']),\n  bypassExpressionFunctionCreation: true,\n  onLoad: (ctx: AttributeContext) => {\n    const { store, el, expression: expressionRaw } = ctx\n    const signal = store[expressionRaw] as Signal<any>\n\n    return ctx.reactivity.effect(() => {\n      if (!('value' in el)) throw new Error('Element does not have value property')\n      el.value = `${signal.value}`\n      const setter = () => {\n        const current = signal.value\n        if (typeof current === 'number') {\n          signal.value = Number(el.value)\n        } else if (typeof current === 'string') {\n          signal.value = el.value\n        } else if (typeof current === 'boolean') {\n          signal.value = Boolean(el.value)\n        } else {\n          throw new Error('Unsupported type')\n        }\n      }\n\n      setter()\n\n      updateModelEvents.forEach((event) => {\n        el.addEventListener(event, setter)\n      })\n\n      return () => {\n        updateModelEvents.forEach((event) => {\n          el.removeEventListener(event, setter)\n        })\n      }\n    })\n  },\n}\n\nexport const TextPlugin: AttributePlugin = {\n  prefix: 'text',\n  description: 'Sets the textContent of the element',\n  mustHaveEmptyKey: true,\n\n  onLoad: (ctx: AttributeContext) => {\n    const { el, expressionFn } = ctx\n    if (!(el instanceof HTMLElement)) throw new Error('Element is not HTMLElement')\n    return ctx.reactivity.effect(() => {\n      el.textContent = `${expressionFn(ctx)}`\n    })\n  },\n}\n\nconst DOMContentLoaded = 'DOMContentLoaded'\nexport const EventPlugin: AttributePlugin = {\n  prefix: 'on',\n  description: 'Sets the event listener of the element',\n  mustNotEmptyKey: true,\n  mustNotEmptyExpression: true,\n\n  onLoad: (ctx: AttributeContext) => {\n    const { el, key, expressionFn } = ctx\n    const callback = () => {\n      expressionFn(ctx)\n    }\n\n    if (key === 'load') {\n      document.addEventListener(DOMContentLoaded, callback, true)\n      return () => {\n        document.removeEventListener(DOMContentLoaded, callback)\n      }\n    }\n\n    const eventType = key.toLowerCase()\n    el.addEventListener(eventType, callback)\n    return () => {\n      el.removeEventListener(eventType, callback)\n    }\n  },\n}\n\nexport const FocusPlugin: AttributePlugin = {\n  prefix: 'focus',\n  description: 'Sets the focus of the element',\n  mustHaveEmptyKey: true,\n  mustHaveEmptyExpression: true,\n\n  onLoad: (ctx: AttributeContext) => {\n    if (!ctx.el.tabIndex) {\n      ctx.el.setAttribute('tabindex', '0')\n    }\n    ctx.el.focus()\n    ctx.el.scrollIntoView({ block: 'center', inline: 'center' })\n    return () => ctx.el.blur()\n  },\n}\n\nexport const AttributePlugins: AttributePlugin[] = [\n  BindAttributePlugin,\n  TwoWayBindingModelPlugin,\n  TextPlugin,\n  FocusPlugin,\n  EventPlugin,\n]\n","const generatedByIdiomorphId = new WeakSet()\n\n//=============================================================================\n// Core Morphing Algorithm - morph, morphNormalizedContent, morphOldNodeTo, morphChildren\n//=============================================================================\nexport function idiomorph(oldNode: Document | Element, newContent: string | Element, config = {}) {\n  if (oldNode instanceof Document) {\n    oldNode = oldNode.documentElement\n  }\n\n  let parsedContent: Element\n  if (typeof newContent === 'string') {\n    parsedContent = parseContent(newContent) as Element\n  } else {\n    parsedContent = newContent\n  }\n\n  const normalizedContent = normalizeContent(parsedContent)\n  const ctx = createMorphContext(oldNode, normalizedContent, config)\n\n  return morphNormalizedContent(oldNode, normalizedContent, ctx)\n}\n\nfunction morphNormalizedContent(oldNode: Element, normalizedNewContent: Element, ctx: any) {\n  if (ctx.head.block) {\n    const oldHead = oldNode.querySelector('head')\n    const newHead = normalizedNewContent.querySelector('head')\n    if (oldHead && newHead) {\n      const promises = handleHeadElement(newHead, oldHead, ctx)\n      // when head promises resolve, call morph again, ignoring the head tag\n      Promise.all(promises).then(() => {\n        morphNormalizedContent(\n          oldNode,\n          normalizedNewContent,\n          Object.assign(ctx, {\n            head: {\n              block: false,\n              ignore: true,\n            },\n          }),\n        )\n      })\n      return\n    }\n  }\n\n  if (ctx.morphStyle === 'innerHTML') {\n    // innerHTML, so we are only updating the children\n    morphChildren(normalizedNewContent, oldNode, ctx)\n    return oldNode.children\n  } else if (ctx.morphStyle === 'outerHTML' || ctx.morphStyle == null) {\n    // otherwise find the best element match in the new content, morph that, and merge its siblings\n    // into either side of the best match\n    const bestMatch = findBestNodeMatch(normalizedNewContent, oldNode, ctx)\n    if (!bestMatch) throw new Error('Could not find best match')\n\n    // stash the siblings that will need to be inserted on either side of the best match\n    const previousSibling = bestMatch?.previousSibling as Element\n    const nextSibling = bestMatch?.nextSibling as Element\n\n    // morph it\n    const morphedNode = morphOldNodeTo(oldNode, bestMatch, ctx)\n\n    if (bestMatch) {\n      // if there was a best match, merge the siblings in too and return the\n      // whole bunch\n      return insertSiblings(previousSibling, morphedNode, nextSibling)\n    } else {\n      // otherwise nothing was added to the DOM\n      return []\n    }\n  } else {\n    throw 'Do not understand how to morph style ' + ctx.morphStyle\n  }\n}\n\n/**\n * @param oldNode root node to merge content into\n * @param newContent new content to merge\n * @param ctx the merge context\n * @returns {Element} the element that ended up in the DOM\n */\nfunction morphOldNodeTo(oldNode: Element, newContent: Element, ctx: any) {\n  if (ctx.ignoreActive && oldNode === document.activeElement) {\n    // don't morph focused element\n  } else if (newContent == null) {\n    if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return\n\n    oldNode.remove()\n    ctx.callbacks.afterNodeRemoved(oldNode)\n    return\n  } else if (!isSoftMatch(oldNode, newContent)) {\n    if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return\n    if (ctx.callbacks.beforeNodeAdded(newContent) === false) return\n\n    if (!oldNode.parentElement) throw new Error('oldNode has no parentElement')\n    oldNode.parentElement.replaceChild(newContent, oldNode)\n    ctx.callbacks.afterNodeAdded(newContent)\n    ctx.callbacks.afterNodeRemoved(oldNode)\n    return newContent\n  } else {\n    if (ctx.callbacks.beforeNodeMorphed(oldNode, newContent) === false) return\n\n    if (oldNode instanceof HTMLHeadElement && ctx.head.ignore) {\n      // ignore the head element\n    } else if (\n      newContent instanceof HTMLHeadElement &&\n      oldNode instanceof HTMLHeadElement &&\n      ctx.head.style !== 'morph'\n    ) {\n      handleHeadElement(newContent, oldNode, ctx)\n    } else {\n      syncNodeFrom(newContent, oldNode)\n      morphChildren(newContent, oldNode, ctx)\n    }\n    ctx.callbacks.afterNodeMorphed(oldNode, newContent)\n    return oldNode\n  }\n}\n\n/**\n * This is the core algorithm for matching up children.  The idea is to use id sets to try to match up\n * nodes as faithfully as possible.  We greedily match, which allows us to keep the algorithm fast, but\n * by using id sets, we are able to better match up with content deeper in the DOM.\n *\n * Basic algorithm is, for each node in the new content:\n *\n * - if we have reached the end of the old parent, append the new content\n * - if the new content has an id set match with the current insertion point, morph\n * - search for an id set match\n * - if id set match found, morph\n * - otherwise search for a \"soft\" match\n * - if a soft match is found, morph\n * - otherwise, prepend the new node before the current insertion point\n *\n * The two search algorithms terminate if competing node matches appear to outweigh what can be achieved\n * with the current node.  See findIdSetMatch() and findSoftMatch() for details.\n *\n * @param {Element} newParent the parent element of the new content\n * @param {Element } oldParent the old content that we are merging the new content into\n * @param ctx the merge context\n */\nfunction morphChildren(newParent: Element, oldParent: Element, ctx: any) {\n  let nextNewChild = newParent.firstChild as Element | null\n  let insertionPoint = oldParent.firstChild as Element | null\n  let newChild\n\n  // run through all the new content\n  while (nextNewChild) {\n    newChild = nextNewChild\n    nextNewChild = newChild.nextSibling as Element | null\n\n    // if we are at the end of the exiting parent's children, just append\n    if (insertionPoint == null) {\n      if (ctx.callbacks.beforeNodeAdded(newChild) === false) return\n\n      oldParent.appendChild(newChild)\n      ctx.callbacks.afterNodeAdded(newChild)\n      removeIdsFromConsideration(ctx, newChild)\n      continue\n    }\n\n    // if the current node has an id set match then morph\n    if (isIdSetMatch(newChild, insertionPoint, ctx)) {\n      morphOldNodeTo(insertionPoint, newChild, ctx)\n      insertionPoint = insertionPoint.nextSibling as Element | null\n      removeIdsFromConsideration(ctx, newChild)\n      continue\n    }\n\n    // otherwise search forward in the existing old children for an id set match\n    let idSetMatch = findIdSetMatch(newParent, oldParent, newChild, insertionPoint, ctx)\n\n    // if we found a potential match, remove the nodes until that point and morph\n    if (idSetMatch) {\n      insertionPoint = removeNodesBetween(insertionPoint, idSetMatch, ctx)\n      morphOldNodeTo(idSetMatch, newChild, ctx)\n      removeIdsFromConsideration(ctx, newChild)\n      continue\n    }\n\n    // no id set match found, so scan forward for a soft match for the current node\n    let softMatch = findSoftMatch(newParent, newChild, insertionPoint, ctx)\n\n    // if we found a soft match for the current node, morph\n    if (softMatch) {\n      insertionPoint = removeNodesBetween(insertionPoint, softMatch, ctx)\n      morphOldNodeTo(softMatch, newChild, ctx)\n      removeIdsFromConsideration(ctx, newChild)\n      continue\n    }\n\n    // abandon all hope of morphing, just insert the new child before the insertion point\n    // and move on\n    if (ctx.callbacks.beforeNodeAdded(newChild) === false) return\n\n    oldParent.insertBefore(newChild, insertionPoint)\n    ctx.callbacks.afterNodeAdded(newChild)\n    removeIdsFromConsideration(ctx, newChild)\n  }\n\n  // remove any remaining old nodes that didn't match up with new content\n  while (insertionPoint !== null) {\n    let tempNode = insertionPoint\n    insertionPoint = insertionPoint.nextSibling as Element | null\n    removeNode(tempNode, ctx)\n  }\n}\n\n//=============================================================================\n// Attribute Syncing Code\n//=============================================================================\n\n/**\n * syncs a given node with another node, copying over all attributes and\n * inner element state from the 'from' node to the 'to' node\n *\n * @param {Element} from the element to copy attributes & state from\n * @param {Element} to the element to copy attributes & state to\n */\nfunction syncNodeFrom(from: Element, to: Element) {\n  let type = from.nodeType\n\n  // if is an element type, sync the attributes from the\n  // new node into the new node\n  if (type === 1 /* element type */) {\n    for (const fromAttribute of from.attributes) {\n      const toAttribute = to.getAttribute(fromAttribute.name)\n      if (toAttribute !== fromAttribute.value) {\n        to.setAttribute(fromAttribute.name, fromAttribute.value)\n      }\n    }\n    for (const toAttribute of to.attributes) {\n      if (!from.hasAttribute(toAttribute.name)) {\n        to.removeAttribute(toAttribute.name)\n      }\n    }\n  }\n\n  // sync text nodes\n  if (type === Node.COMMENT_NODE || type === Node.TEXT_NODE) {\n    if (to.nodeValue !== from.nodeValue) {\n      to.nodeValue = from.nodeValue\n    }\n  }\n\n  // NB: many bothans died to bring us information:\n  //\n  // https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js\n  // https://github.com/choojs/nanomorph/blob/master/lib/morph.jsL113\n\n  // sync input value\n  if (from instanceof HTMLInputElement && to instanceof HTMLInputElement && from.type !== 'file') {\n    to.value = from.value || ''\n    syncAttribute(from, to, 'value')\n\n    // sync boolean attributes\n    syncAttribute(from, to, 'checked')\n    syncAttribute(from, to, 'disabled')\n  } else if (from instanceof HTMLOptionElement) {\n    syncAttribute(from, to, 'selected')\n  } else if (from instanceof HTMLTextAreaElement && to instanceof HTMLTextAreaElement) {\n    const fromValue = from.value\n    const toValue = to.value\n    if (fromValue !== toValue) {\n      to.value = fromValue\n    }\n    if (to.firstChild && to.firstChild.nodeValue !== fromValue) {\n      to.firstChild.nodeValue = fromValue\n    }\n  }\n}\n\nfunction syncAttribute(from: Element, to: Element, attributeName: string) {\n  const fAttr = from.getAttribute(attributeName)\n  const tAttr = to.getAttribute(attributeName)\n\n  if (fAttr !== tAttr) {\n    if (fAttr) {\n      to.setAttribute(attributeName, fAttr)\n    } else {\n      to.removeAttribute(attributeName)\n    }\n  }\n}\n\n//=============================================================================\n// the HEAD tag can be handled specially, either w/ a 'merge' or 'append' style\n//=============================================================================\nfunction handleHeadElement(newHeadTag: HTMLHeadElement, currentHead: HTMLHeadElement, ctx: any) {\n  const added = []\n  const removed = []\n  const preserved = []\n  const nodesToAppend = []\n\n  const headMergeStyle = ctx.head.style\n\n  // put all new head elements into a Map, by their outerHTML\n  const srcToNewHeadNodes = new Map()\n  for (const newHeadChild of newHeadTag.children) {\n    srcToNewHeadNodes.set(newHeadChild.outerHTML, newHeadChild)\n  }\n\n  // for each elt in the current head\n  for (const currentHeadElt of currentHead.children) {\n    // If the current head element is in the map\n    let inNewContent = srcToNewHeadNodes.has(currentHeadElt.outerHTML)\n    let isReAppended = ctx.head.shouldReAppend(currentHeadElt)\n    let isPreserved = ctx.head.shouldPreserve(currentHeadElt)\n    if (inNewContent || isPreserved) {\n      if (isReAppended) {\n        // remove the current version and let the new version replace it and re-execute\n        removed.push(currentHeadElt)\n      } else {\n        // this element already exists and should not be re-appended, so remove it from\n        // the new content map, preserving it in the DOM\n        srcToNewHeadNodes.delete(currentHeadElt.outerHTML)\n        preserved.push(currentHeadElt)\n      }\n    } else {\n      if (headMergeStyle === 'append') {\n        // we are appending and this existing element is not new content\n        // so if and only if it is marked for re-append do we do anything\n        if (isReAppended) {\n          removed.push(currentHeadElt)\n          nodesToAppend.push(currentHeadElt)\n        }\n      } else {\n        // if this is a merge, we remove this content since it is not in the new head\n        if (ctx.head.shouldRemove(currentHeadElt) !== false) {\n          removed.push(currentHeadElt)\n        }\n      }\n    }\n  }\n\n  // Push the remaining new head elements in the Map into the\n  // nodes to append to the head tag\n  nodesToAppend.push(...srcToNewHeadNodes.values())\n  console.log('to append: ', nodesToAppend)\n\n  const promises = []\n  for (const newNode of nodesToAppend) {\n    console.log('adding: ', newNode)\n    const newElt = document.createRange().createContextualFragment(newNode.outerHTML).firstChild as Element | null\n    if (!newElt) throw new Error('could not create new element from: ' + newNode.outerHTML)\n    console.log(newElt)\n    if (!!ctx.callbacks.beforeNodeAdded(newElt)) {\n      if (newElt.hasAttribute('href') || newElt.hasAttribute('src')) {\n        let resolver: (value: unknown) => void\n        const promise = new Promise((resolve) => {\n          resolver = resolve\n        })\n        newElt.addEventListener('load', function () {\n          resolver(undefined)\n        })\n        promises.push(promise)\n      }\n      currentHead.appendChild(newElt)\n      ctx.callbacks.afterNodeAdded(newElt)\n      added.push(newElt)\n    }\n  }\n\n  // remove all removed elements, after we have appended the new elements to avoid\n  // additional network requests for things like style sheets\n  for (const removedElement of removed) {\n    if (ctx.callbacks.beforeNodeRemoved(removedElement) !== false) {\n      currentHead.removeChild(removedElement)\n      ctx.callbacks.afterNodeRemoved(removedElement)\n    }\n  }\n\n  ctx.head.afterHeadMorphed(currentHead, {\n    added: added,\n    kept: preserved,\n    removed: removed,\n  })\n  return promises\n}\n\n//=============================================================================\n// Misc\n//=============================================================================\nfunction noOp() {}\n\nfunction createMorphContext(oldNode: Element, newContent: Element, config: any) {\n  return {\n    target: oldNode,\n    newContent: newContent,\n    config: config,\n    morphStyle: config.morphStyle,\n    ignoreActive: config.ignoreActive,\n    idMap: createIdMap(oldNode, newContent),\n    deadIds: new Set(),\n    callbacks: Object.assign(\n      {\n        beforeNodeAdded: noOp,\n        afterNodeAdded: noOp,\n        beforeNodeMorphed: noOp,\n        afterNodeMorphed: noOp,\n        beforeNodeRemoved: noOp,\n        afterNodeRemoved: noOp,\n      },\n      config.callbacks,\n    ),\n    head: Object.assign(\n      {\n        style: 'merge',\n        shouldPreserve: (elt: Element) => elt.getAttribute('im-preserve') === 'true',\n        shouldReAppend: (elt: Element) => elt.getAttribute('im-re-append') === 'true',\n        shouldRemove: noOp,\n        afterHeadMorphed: noOp,\n      },\n      config.head,\n    ),\n  }\n}\n\nfunction isIdSetMatch(node1: Element, node2: Element, ctx: any) {\n  if (!node1 || !node2) return false\n\n  if (node1.nodeType === node2.nodeType && node1.tagName === node2.tagName) {\n    if (node1?.id?.length && node1.id === node2.id) return true\n\n    return getIdIntersectionCount(ctx, node1, node2) > 0\n  }\n  return false\n}\n\nfunction isSoftMatch(node1: Element, node2: Element) {\n  if (!node1 || !node2) return false\n\n  return node1.nodeType === node2.nodeType && node1.tagName === node2.tagName\n}\n\nfunction removeNodesBetween(startInclusive: Element, endExclusive: Element, ctx: any) {\n  while (startInclusive !== endExclusive) {\n    const tempNode = startInclusive\n    startInclusive = startInclusive?.nextSibling as Element\n    if (!tempNode) throw new Error('tempNode is null')\n    removeNode(tempNode, ctx)\n  }\n  removeIdsFromConsideration(ctx, endExclusive)\n  return endExclusive.nextSibling as Element | null\n}\n\n//=============================================================================\n// Scans forward from the insertionPoint in the old parent looking for a potential id match\n// for the newChild.  We stop if we find a potential id match for the new child OR\n// if the number of potential id matches we are discarding is greater than the\n// potential id matches for the new child\n//=============================================================================\nfunction findIdSetMatch(newContent: Element, oldParent: Element, newChild: Element, insertionPoint: Element, ctx: any) {\n  // max id matches we are willing to discard in our search\n  const newChildPotentialIdCount = getIdIntersectionCount(ctx, newChild, oldParent)\n\n  let potentialMatch: Element | null = null\n\n  // only search forward if there is a possibility of an id match\n  if (newChildPotentialIdCount > 0) {\n    potentialMatch = insertionPoint\n    // if there is a possibility of an id match, scan forward\n    // keep track of the potential id match count we are discarding (the\n    // newChildPotentialIdCount must be greater than this to make it likely\n    // worth it)\n    let otherMatchCount = 0\n    while (potentialMatch != null) {\n      // If we have an id match, return the current potential match\n      if (isIdSetMatch(newChild, potentialMatch, ctx)) {\n        return potentialMatch\n      }\n\n      // computer the other potential matches of this new content\n      otherMatchCount += getIdIntersectionCount(ctx, potentialMatch, newContent)\n      if (otherMatchCount > newChildPotentialIdCount) {\n        // if we have more potential id matches in _other_ content, we\n        // do not have a good candidate for an id match, so return null\n        return null\n      }\n\n      // advanced to the next old content child\n      potentialMatch = potentialMatch.nextSibling as Element | null\n    }\n  }\n  return potentialMatch\n}\n\n//=============================================================================\n// Scans forward from the insertionPoint in the old parent looking for a potential soft match\n// for the newChild.  We stop if we find a potential soft match for the new child OR\n// if we find a potential id match in the old parents children OR if we find two\n// potential soft matches for the next two pieces of new content\n//=============================================================================\nfunction findSoftMatch(newContent: Element, newChild: Element, insertionPoint: Element, ctx: any) {\n  let potentialSoftMatch = insertionPoint as Element | null\n  let nextSibling = newChild.nextSibling as Element | null\n\n  let siblingSoftMatchCount = 0\n\n  while (potentialSoftMatch && nextSibling) {\n    if (getIdIntersectionCount(ctx, potentialSoftMatch, newContent) > 0) {\n      // the current potential soft match has a potential id set match with the remaining new\n      // content so bail out of looking\n      return null\n    }\n\n    // if we have a soft match with the current node, return it\n    if (isSoftMatch(newChild, potentialSoftMatch)) {\n      return potentialSoftMatch\n    }\n\n    if (isSoftMatch(nextSibling, potentialSoftMatch)) {\n      // the next new node has a soft match with this node, so\n      // increment the count of future soft matches\n      siblingSoftMatchCount++\n      nextSibling = nextSibling.nextSibling as Element | null\n\n      // If there are two future soft matches, bail to allow the siblings to soft match\n      // so that we don't consume future soft matches for the sake of the current node\n      if (siblingSoftMatchCount >= 2) {\n        return null\n      }\n    }\n\n    // advanced to the next old content child\n    potentialSoftMatch = potentialSoftMatch.nextSibling as Element | null\n  }\n\n  return potentialSoftMatch\n}\n\nconst parser = new DOMParser()\nfunction parseContent(newContent: string) {\n  // remove svgs to avoid false-positive matches on head, etc.\n  const contentWithSvgsRemoved = newContent.replace(/<svg(\\s[^>]*>|>)([\\s\\S]*?)<\\/svg>/gim, '')\n\n  // if the newContent contains a html, head or body tag, we can simply parse it w/o wrapping\n  if (\n    contentWithSvgsRemoved.match(/<\\/html>/) ||\n    contentWithSvgsRemoved.match(/<\\/head>/) ||\n    contentWithSvgsRemoved.match(/<\\/body>/)\n  ) {\n    const content = parser.parseFromString(newContent, 'text/html')\n    // if it is a full HTML document, return the document itself as the parent container\n    if (contentWithSvgsRemoved.match(/<\\/html>/)) {\n      generatedByIdiomorphId.add(content)\n      return content\n    } else {\n      // otherwise return the html element as the parent container\n      let Element = content.firstChild\n      if (Element) {\n        generatedByIdiomorphId.add(Element)\n        return Element as Element\n      } else {\n        return null\n      }\n    }\n  } else {\n    // if it is partial HTML, wrap it in a template tag to provide a parent element and also to help\n    // deal with touchy tags like tr, tbody, etc.\n    const responseDoc = parser.parseFromString(`<body><template>${newContent}</template></body>`, 'text/html')\n    const content = responseDoc.body.querySelector('template')?.content\n    if (!content) throw new Error('content is null')\n    generatedByIdiomorphId.add(content)\n    return content\n  }\n}\n\nfunction normalizeContent(newContent: Element) {\n  if (newContent == null) {\n    // noinspection UnnecessaryLocalVariableJS\n    const dummyParent = document.createElement('div')\n    return dummyParent\n  } else if (generatedByIdiomorphId.has(newContent)) {\n    // the template tag created by idiomorph parsing can serve as a dummy parent\n    return newContent\n  } else if (newContent instanceof Node) {\n    // a single node is added as a child to a dummy parent\n    const dummyParent = document.createElement('div')\n    dummyParent.append(newContent)\n    return dummyParent\n  } else {\n    // all nodes in the array or Element collection are consolidated under\n    // a single dummy parent element\n    const dummyParent = document.createElement('div')\n    for (const elt of [...newContent]) {\n      dummyParent.append(elt)\n    }\n    return dummyParent\n  }\n}\n\nfunction insertSiblings(previousSibling?: Element, morphedNode?: Element, nextSibling?: Element) {\n  const stack = []\n  const added = []\n  while (previousSibling) {\n    stack.push(previousSibling)\n    previousSibling = previousSibling.previousSibling as Element\n  }\n  while (stack.length > 0) {\n    const node = stack.pop()!\n    added.push(node) // push added preceding siblings on in order and insert\n    morphedNode?.parentElement?.insertBefore(node, morphedNode)\n  }\n  added.push(morphedNode)\n  while (nextSibling) {\n    stack.push(nextSibling)\n    added.push(nextSibling) // here we are going in order, so push on as we scan, rather than add\n    nextSibling = nextSibling.nextSibling as Element\n  }\n  while (stack.length) {\n    morphedNode?.parentElement?.insertBefore(stack.pop()!, morphedNode.nextSibling)\n  }\n  return added\n}\n\nfunction findBestNodeMatch(newContent: Element, oldNode: Element, ctx: any) {\n  let currentElement = newContent.firstChild as Element | null\n  let bestElement = currentElement\n  let score = 0\n  while (currentElement) {\n    let newScore = scoreElement(currentElement, oldNode, ctx)\n    if (newScore > score) {\n      bestElement = currentElement\n      score = newScore\n    }\n    currentElement = currentElement.nextSibling as Element | null\n  }\n  return bestElement\n}\n\nfunction scoreElement(node1: Element, node2: Element, ctx: any) {\n  if (isSoftMatch(node1, node2)) {\n    return 0.5 + getIdIntersectionCount(ctx, node1, node2)\n  }\n  return 0\n}\n\nfunction removeNode(tempNode: Element, ctx: any) {\n  removeIdsFromConsideration(ctx, tempNode)\n  if (ctx.callbacks.beforeNodeRemoved(tempNode) === false) return\n\n  tempNode.remove()\n  ctx.callbacks.afterNodeRemoved(tempNode)\n}\n\n//=============================================================================\n// ID Set Functions\n//=============================================================================\n\nfunction isIdInConsideration(ctx: any, id: string) {\n  return !ctx.deadIds.has(id)\n}\n\nfunction idIsWithinNode(ctx: any, id: string, targetNode: Element) {\n  return ctx.idMap.get(targetNode)?.has(id) || false\n}\n\nfunction removeIdsFromConsideration(ctx: any, node: Element) {\n  const idSet = ctx.idMap.get(node)\n  if (!idSet) return\n  for (const id of idSet) {\n    ctx.deadIds.add(id)\n  }\n}\n\nfunction getIdIntersectionCount(ctx: any, node1: Element, node2: Element) {\n  const sourceSet = ctx.idMap.get(node1)\n  if (!sourceSet) return 0\n\n  let matchCount = 0\n  for (const id of sourceSet) {\n    // a potential match is an id in the source and potentialIdsSet, but\n    // that has not already been merged into the DOM\n    if (isIdInConsideration(ctx, id) && idIsWithinNode(ctx, id, node2)) {\n      ++matchCount\n    }\n  }\n  return matchCount\n}\n\n/**\n * A bottom up algorithm that finds all elements with ids inside of the node\n * argument and populates id sets for those nodes and all their parents, generating\n * a set of ids contained within all nodes for the entire hierarchy in the DOM\n *\n * @param node {Element}\n * @param {Map<Node, Set<String>>} idMap\n */\nfunction populateIdMapForNode(node: Element, idMap: Map<Element, Set<string>>) {\n  const nodeParent = node.parentElement\n  // find all elements with an id property\n  const idElements = node.querySelectorAll('[id]')\n  for (const elt of idElements) {\n    let current = elt as Element | null\n    // walk up the parent hierarchy of that element, adding the id\n    // of element to the parent's id set\n    while (current !== nodeParent && !!current) {\n      let idSet = idMap.get(current)\n      // if the id set doesn't exist, create it and insert it in the  map\n      if (idSet == null) {\n        idSet = new Set()\n        idMap.set(current, idSet)\n      }\n      idSet.add(elt.id)\n      current = current.parentElement\n    }\n  }\n}\n\n/**\n * This function computes a map of nodes to all ids contained within that node (inclusive of the\n * node).  This map can be used to ask if two nodes have intersecting sets of ids, which allows\n * for a looser definition of \"matching\" than tradition id matching, and allows child nodes\n * to contribute to a parent nodes matching.\n *\n * @param {Element} oldContent  the old content that will be morphed\n * @param {Element} newContent  the new content to morph to\n * @returns {Map<Node, Set<String>>} a map of nodes to id sets for the\n */\nfunction createIdMap(oldContent: Element, newContent: Element) {\n  const idMap = new Map()\n  populateIdMapForNode(oldContent, idMap)\n  populateIdMapForNode(newContent, idMap)\n  return idMap\n}\n","import { toHTMLorSVGElement } from '..'\nimport { idiomorph } from '../external/idiomorph'\nimport { Signal } from '../external/preact-core'\nimport { Actions, AttributeContext, AttributePlugin } from '../types'\n\nconst GET = 'get'\nconst POST = 'post'\nconst PUT = 'put'\nconst PATCH = 'patch'\nconst DELETE = 'delete'\nconst Methods = [GET, POST, PUT, PATCH, DELETE]\n\nexport const BackendActions: Actions = Methods.reduce((acc, method) => {\n  acc[method] = async (ctx) => fetcher(method, ctx)\n  return acc\n}, {} as Actions)\n\nconst ACCEPT = 'Accept'\nconst CONTENT_TYPE = 'Content-Type'\nconst APPLICATION_JSON = 'application/json'\nconst DATASTAR_CLASS_PREFIX = 'datastar'\nconst INDICATOR_CLASS = `${DATASTAR_CLASS_PREFIX}-indicator`\nconst LOADING_CLASS = `${DATASTAR_CLASS_PREFIX}-request`\nconst TEXT_HTML = 'text/html'\nconst SELECTOR = 'selector'\nconst SWAP = 'swap'\n\n// type Method = typeof GET | typeof POST | typeof PUT | typeof PATCH | typeof DELETE\n\nexport const HeadersPlugin: AttributePlugin = {\n  prefix: 'header',\n  description: 'Sets the header of the fetch request',\n  mustNotEmptyKey: true,\n  mustNotEmptyExpression: true,\n\n  onLoad: (ctx) => {\n    const headers = ctx.store.fetch.headers\n    const key = ctx.key[0].toUpperCase() + ctx.key.slice(1)\n    headers[key] = ctx.reactivity.computed(() => ctx.expressionFn(ctx))\n    return () => {\n      delete headers[key]\n    }\n  },\n}\n\nexport const FetchURLPlugin: AttributePlugin = {\n  prefix: 'fetchUrl',\n  description: 'Sets the fetch url',\n  mustHaveEmptyKey: true,\n  mustNotEmptyExpression: true,\n  onGlobalInit: ({ mergeStore }) => {\n    const style = document.createElement('style')\n    style.innerHTML = `\n.${INDICATOR_CLASS}{\n opacity:0;\n transition: opacity 500ms ease-in;\n}\n.${LOADING_CLASS} .${INDICATOR_CLASS}{\n opacity:1\n}\n.${LOADING_CLASS}.${INDICATOR_CLASS}{\n opacity:1\n}\n`\n    document.head.appendChild(style)\n    const h = new Headers()\n    h.append(ACCEPT, TEXT_HTML)\n    h.append(CONTENT_TYPE, APPLICATION_JSON)\n    mergeStore({\n      fetch: {\n        headers: {},\n        elementURLs: {},\n      },\n    })\n  },\n  onLoad: (ctx) => {\n    return ctx.reactivity.effect(() => {\n      const c = ctx.reactivity.computed(() => `${ctx.expressionFn(ctx)}`)\n      ctx.store.fetch.elementURLs[ctx.el.id] = c\n      return () => {\n        delete ctx.store.fetch.elementURLs[ctx.el.id]\n      }\n    })\n  },\n}\n\nexport const ServerSentEventsPlugin: AttributePlugin = {\n  prefix: 'sse',\n  description: 'Sets the value of the element',\n  mustHaveEmptyKey: true,\n  onLoad: (ctx) => {\n    const url = ctx.expressionFn(ctx)\n    if (typeof url !== 'string') throw new Error('SSE url must be a string')\n\n    const eventSource = new EventSource(url)\n\n    const callback = (evt: MessageEvent) => {\n      mergeHTMLFragments(ctx, evt.data, 'append')\n    }\n    eventSource.addEventListener('message', callback)\n\n    const errCallback = (evt: Event) => console.error(evt)\n    eventSource.addEventListener('error', errCallback)\n\n    return () => {\n      eventSource.removeEventListener('message', callback)\n      eventSource.removeEventListener('error', errCallback)\n      eventSource.close()\n    }\n  },\n}\n\nexport const BackendPlugins: AttributePlugin[] = [HeadersPlugin, FetchURLPlugin, ServerSentEventsPlugin]\n\nasync function fetcher(method: string, ctx: AttributeContext) {\n  const { el, store } = ctx\n  const urlSignal: Signal<string> = store.fetch.elementURLs[el.id]\n  if (!urlSignal) throw new Error(`No signal for ${method}`)\n\n  el.classList.add(LOADING_CLASS)\n\n  const url = new URL(urlSignal.value, window.location.origin)\n\n  const headers = new Headers()\n  headers.append(ACCEPT, TEXT_HTML)\n  headers.append(CONTENT_TYPE, APPLICATION_JSON)\n\n  const storeHeaders: Record<string, string> = store.fetch.headers.value\n  if (storeHeaders) {\n    for (const key in storeHeaders) {\n      const value = storeHeaders[key]\n      headers.append(key, value)\n    }\n  }\n\n  const storeWithoutFetch = { ...store }\n  delete storeWithoutFetch.fetch\n  const storeJSON = JSON.stringify(storeWithoutFetch)\n  const req: RequestInit = { method, headers }\n  if (method === GET) {\n    const queryParams = new URLSearchParams(url.search)\n    queryParams.append('datastar', storeJSON)\n    url.search = queryParams.toString()\n  } else {\n    req.body = storeJSON\n  }\n\n  const res = await fetch(url, req)\n  if (!res.ok) throw new Error('Network response was not ok.')\n  const text = await res.text()\n\n  const isRedirect = res.status >= 300 && res.status < 40\n  if (isRedirect) {\n    let url = text\n    if (url.startsWith('/')) url = window.location.origin + url\n    Response.redirect(url)\n  }\n\n  const isHTML = res.headers.get(CONTENT_TYPE) === TEXT_HTML\n  if (!isHTML) throw new Error(`Response is not HTML, can't merge`)\n  mergeHTMLFragments(ctx, text)\n\n  el.classList.remove(LOADING_CLASS)\n}\n\nconst p = new DOMParser()\nexport function mergeHTMLFragments(ctx: AttributeContext, html: string, merge = 'morph') {\n  const { el } = ctx\n  const dom = [...p.parseFromString(html, TEXT_HTML).body.children]\n  for (let i = 0; i < dom.length; i++) {\n    const frag = dom[i]\n    if (!(frag instanceof Element)) {\n      throw new Error('Not an element')\n    }\n    const fragElement = toHTMLorSVGElement(frag)\n\n    const id = frag.getAttribute('id')\n    const firstFrag = i === 0\n    const hasID = !!id?.length\n    const useElAsTarget = firstFrag && !hasID\n\n    let targets: Iterable<Element>\n    if (useElAsTarget) {\n      targets = [el]\n    } else {\n      if (!hasID) throw new Error('No id')\n\n      const targetSelector = fragElement?.dataset?.[SELECTOR] || `#${id}`\n      targets = document.querySelectorAll(targetSelector) || []\n    }\n    if (!!!targets) throw new Error('No target element')\n\n    for (const target of targets) {\n      const swap = fragElement?.dataset?.[SWAP]\n      if (swap) merge = swap\n\n      switch (merge) {\n        case 'morph':\n          idiomorph(target, frag)\n          ctx.applyPlugins(target)\n          continue\n        case 'inner':\n          target.innerHTML = frag.innerHTML //  The default, replace the inner html of the target element\n          break\n        case 'outer':\n          target.outerHTML = frag.outerHTML //  Replace the entire target element with the response\n          break\n        case 'prepend':\n          target.prepend(frag) //  Insert the response before the first child of the target element\n          break\n        case 'append':\n          target.append(frag) //  Insert the response after the last child of the target element\n          break\n        case 'before':\n          target.before(frag) //  Insert the response before the target element\n          break\n        case 'after':\n          target.after(frag) //  Insert the response after the target element\n          break\n        case 'delete':\n          target.remove() //  Deletes the target element regardless of the response\n          break\n        default:\n          throw new Error('Invalid merge mode')\n      }\n      ctx.applyPlugins(frag)\n    }\n  }\n}\n","import { toHTMLorSVGElement } from '../dom'\nimport { effect } from '../external/preact-core'\nimport { AttributeContext, AttributePlugin } from '../types'\n\nconst DISPLAY = 'display'\nconst NONE = 'none'\nconst IMPORTANT = 'important'\n\nexport const ShowPlugin: AttributePlugin = {\n  prefix: 'show',\n  description: 'Sets the display of the element',\n  allowedModifiers: new Set([IMPORTANT]),\n\n  onLoad: (ctx: AttributeContext) => {\n    const { el, modifiers, expressionFn } = ctx\n\n    return effect(() => {\n      const expressionEvaluated = expressionFn(ctx)\n      const shouldShow = !!expressionEvaluated\n\n      const isImportant = modifiers.has(IMPORTANT)\n      const priority = isImportant ? IMPORTANT : undefined\n\n      if (shouldShow) {\n        if (el.style.length === 1 && el.style.display === NONE) {\n          el.style.removeProperty(DISPLAY)\n        } else {\n          el.style.setProperty(DISPLAY, '', priority)\n        }\n      } else {\n        el.style.setProperty(DISPLAY, NONE, priority)\n      }\n    })\n  },\n}\n\nconst INTERSECTS = 'intersects'\nconst ONCE = 'once'\nconst HALF = 'half'\nconst FULL = 'full'\n\nexport const IntersectionPlugin: AttributePlugin = {\n  prefix: INTERSECTS,\n  description: `Run expression when element intersects with viewport`,\n  allowedModifiers: new Set([ONCE, HALF, FULL]),\n  mustHaveEmptyKey: true,\n  onLoad: (ctx: AttributeContext) => {\n    const { modifiers } = ctx\n    const options = { threshold: 0 }\n    if (modifiers.has(FULL)) options.threshold = 1\n    else if (modifiers.has(HALF)) options.threshold = 0.5\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          ctx.expressionFn(ctx)\n          if (modifiers.has(ONCE)) {\n            observer.disconnect()\n          }\n        }\n      })\n    }, options)\n\n    observer.observe(ctx.el)\n    return () => observer.disconnect()\n  },\n}\n\nconst PREPEND = 'prepend'\nconst APPEND = 'append'\nconst teleportParentErr = new Error('Target element must have a parent if using prepend or append')\nexport const TeleportPlugin: AttributePlugin = {\n  prefix: 'teleport',\n  description: 'Teleports the element to another element',\n  allowedModifiers: new Set([PREPEND, APPEND]),\n  allowedTags: new Set(['template']),\n  bypassExpressionFunctionCreation: true,\n  onLoad: (ctx: AttributeContext) => {\n    const { el, modifiers, expression } = ctx\n    if (!(el instanceof HTMLTemplateElement)) throw new Error() // type guard\n\n    const target = document.querySelector(expression)\n    if (!target) throw new Error(`Target element not found: ${expression}`)\n\n    if (!el.content) {\n      throw new Error('Template element must have content')\n    }\n\n    const n = el.content.cloneNode(true)\n    const nEl = toHTMLorSVGElement(n as Element)\n    if (nEl?.firstElementChild) throw new Error('Empty template')\n\n    if (modifiers.has(PREPEND)) {\n      if (!target.parentNode) throw teleportParentErr\n      target.parentNode.insertBefore(n, target)\n    } else if (modifiers.has(APPEND)) {\n      if (!target.parentNode) throw teleportParentErr\n      target.parentNode.insertBefore(n, target.nextSibling)\n    } else {\n      target.appendChild(n)\n    }\n  },\n}\n\nexport const ScrollIntoViewPlugin: AttributePlugin = {\n  prefix: 'scrollIntoView',\n  description: 'Scrolls the element into view',\n  onLoad: (ctx: AttributeContext) => {\n    const { el } = ctx\n    el.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n      inline: 'center',\n    })\n  },\n}\n\nexport const VisibilityPlugins: AttributePlugin[] = [\n  ShowPlugin,\n  IntersectionPlugin,\n  TeleportPlugin,\n  ScrollIntoViewPlugin,\n]\n","export * from './core'\nexport * from './dom'\nexport * from './types'\n\nimport { Datastar } from './core'\nimport { AttributePlugins } from './plugins/attributes'\nimport { BackendActions, BackendPlugins } from './plugins/backend'\nimport { VisibilityPlugins } from './plugins/visibility'\nimport { Actions } from './types'\n\nconst start = performance.now()\n\nconst actions: Actions = Object.assign({}, BackendActions)\nconst plugins = [...BackendPlugins, ...VisibilityPlugins, ...AttributePlugins]\nexport const datastar = new Datastar(actions, ...plugins)\n\nconst end = performance.now()\nconsole.log(`Datastar loaded in ${end - start}ms`)\n"],"names":["toHTMLorSVGElement","node","cycleDetected","mutationDetected","identifier","RUNNING","NOTIFIED","OUTDATED","DISPOSED","HAS_ERROR","TRACKING","startBatch","batchDepth","endBatch","error","hasError","batchedEffect","effect","batchIteration","next","needsToRecompute","err","batch","callback","evalContext","globalVersion","addDependency","signal","Signal","value","prev","fn","flag","Computed","target","prepareSources","rollbackNode","cleanupSources","head","compute","prevContext","computed","cleanupEffect","cleanup","disposeEffect","endEffect","Effect","finish","DeepSignal","getValue","payload","setValue","deepSignal","initialValue","acc","key","iKey","peek","apply","patchItem","targetResult","k","SignalProcessor","groups","ActionProcessor","action","args","RefProcessor","ref","CorePreprocessors","BodyStoreAttributePlugin","ctx","bodyStore","RefPlugin","el","expression","CorePlugins","Datastar","actions","plugins","allPluginPrefixes","p","requiredPluginType","element","removalSet","removal","store","revisedStore","rootElement","appliedProcessors","walkDownDOM","styl","id","dsKey","t","keyRaw","modifiersWithArgsArr","modifiersArr","m","label","modifier","modifiers","processors","processor","matches","match","whole","reactivity","refs","fnContent","kebabize","str","$","ofs","BindAttributePlugin","updateModelEvents","TwoWayBindingModelPlugin","expressionRaw","setter","current","event","TextPlugin","expressionFn","DOMContentLoaded","EventPlugin","eventType","FocusPlugin","AttributePlugins","generatedByIdiomorphId","idiomorph","oldNode","newContent","config","parsedContent","parseContent","normalizedContent","normalizeContent","createMorphContext","morphNormalizedContent","normalizedNewContent","oldHead","newHead","promises","handleHeadElement","morphChildren","bestMatch","findBestNodeMatch","previousSibling","nextSibling","morphedNode","morphOldNodeTo","insertSiblings","isSoftMatch","syncNodeFrom","newParent","oldParent","nextNewChild","insertionPoint","newChild","removeIdsFromConsideration","isIdSetMatch","idSetMatch","findIdSetMatch","removeNodesBetween","softMatch","findSoftMatch","tempNode","removeNode","from","to","type","fromAttribute","toAttribute","syncAttribute","fromValue","toValue","attributeName","fAttr","tAttr","newHeadTag","currentHead","added","removed","preserved","nodesToAppend","headMergeStyle","srcToNewHeadNodes","newHeadChild","currentHeadElt","inNewContent","isReAppended","isPreserved","newNode","newElt","resolver","promise","resolve","removedElement","noOp","createIdMap","elt","node1","node2","getIdIntersectionCount","startInclusive","endExclusive","newChildPotentialIdCount","potentialMatch","otherMatchCount","potentialSoftMatch","siblingSoftMatchCount","parser","contentWithSvgsRemoved","content","Element","dummyParent","stack","currentElement","bestElement","score","newScore","scoreElement","isIdInConsideration","idIsWithinNode","targetNode","idSet","sourceSet","matchCount","populateIdMapForNode","idMap","nodeParent","idElements","oldContent","GET","POST","PUT","PATCH","DELETE","Methods","BackendActions","method","fetcher","ACCEPT","CONTENT_TYPE","APPLICATION_JSON","DATASTAR_CLASS_PREFIX","INDICATOR_CLASS","LOADING_CLASS","TEXT_HTML","SELECTOR","SWAP","HeadersPlugin","headers","FetchURLPlugin","mergeStore","style","h","c","ServerSentEventsPlugin","url","eventSource","evt","mergeHTMLFragments","errCallback","BackendPlugins","urlSignal","storeHeaders","storeWithoutFetch","storeJSON","req","queryParams","res","text","html","merge","dom","i","frag","fragElement","firstFrag","hasID","useElAsTarget","targets","targetSelector","swap","DISPLAY","NONE","IMPORTANT","ShowPlugin","shouldShow","priority","INTERSECTS","ONCE","HALF","FULL","IntersectionPlugin","options","observer","entries","entry","PREPEND","APPEND","teleportParentErr","TeleportPlugin","n","ScrollIntoViewPlugin","VisibilityPlugins","start","datastar","end"],"mappings":"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"}